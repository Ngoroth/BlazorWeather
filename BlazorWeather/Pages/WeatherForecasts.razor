@page "/weatherForecasts"

@using System.Linq

@using BlazorWeather.Domain.Models
@using BlazorWeather.Domain.Interfaces
@using BlazorWeather.Models
@inject IWeatherForecastService ForecastService

<h1>Weather forecast</h1>

<p>This component demonstrates weather in my favorite cities.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>City</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Clouds</th>
                <th>Humidity</th>
                <th>Wind (m/s)</th>
                <th>Pressure (hpa)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.City</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Clouds</td>
                    <td>@forecast.Humidity</td>
                    <td>@forecast.WindSpeed</td>
                    <td>@forecast.Pressure</td>
                </tr>
            }
        </tbody>
    </table>
}

<EditForm Model="searchModel" OnValidSubmit="searchWeatherForecast">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <p>
        <label for="cityName">What is your favorite city?</label>
        <InputText id="cityName" @bind-Value="searchModel.CityName" />
    </p>
    <button type="submit" class="btn btn-primary">Search</button>
</EditForm>

@if (favoriteCityWeatherForecast != null)
{
    <div class="card mx-auto" style="width: 18rem;">
        <div class="card-header">
            @favoriteCityWeatherForecast.City
        </div>
        <ul class="list-group list-group-flush">
            <li class="list-group-item">Current Temperature: @favoriteCityWeatherForecast.TemperatureC °C</li>
            <li class="list-group-item">Clouds: @favoriteCityWeatherForecast.Clouds %</li>
            <li class="list-group-item">Humidity: @favoriteCityWeatherForecast.Humidity %</li>
            <li class="list-group-item">Wind: @favoriteCityWeatherForecast.WindSpeed m/s</li>
            <li class="list-group-item">Pressure: @favoriteCityWeatherForecast.Pressure hpa</li>
        </ul>
    </div>
}


@code {
    private WeatherForecast[] forecasts { get; set; }

    private SearchWeatherForecastModel searchModel { get; set; } = new SearchWeatherForecastModel();

    private WeatherForecast favoriteCityWeatherForecast { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var myFavoriteCities = new[] { "Moscow", "Nizhniy Tagil", "Prague", "Venice", "Kyoto" };
        forecasts = await ForecastService.GetForecastsAsync(myFavoriteCities);
    }

    private async Task searchWeatherForecast()
    {
        favoriteCityWeatherForecast = (await ForecastService.GetForecastsAsync(searchModel.CityName)).First();
    }
}
